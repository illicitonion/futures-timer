var searchIndex = {};
searchIndex["futures_timer"] = {"doc":"A general purpose crate for working with timeouts and delays with futures.","items":[[3,"Timer","futures_timer","A \"timer heap\" used to power separately owned instances of `Delay` and `Interval`.",null,null],[3,"TimerHandle","","A handle to a `Timer` which is used to create instances of a `Delay`.",null,null],[3,"Delay","","A future representing the notification that an elapsed duration has occurred.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"SetDefaultError","","Error returned from `TimerHandle::set_fallback`.",null,null],[0,"ext","","Extension traits for the standard `Stream` and `Future` traits.",null,null],[3,"Timeout","futures_timer::ext","Future returned by the `FutureExt::timeout` method.",null,null],[3,"TimeoutStream","","Stream returned by the `StreamExt::timeout` method.",null,null],[8,"FutureExt","","An extension trait for futures which provides convenient accessors for timing out execution and such.",null,null],[11,"timeout","","Creates a new future which will take at most `dur` time to resolve from the point at which this method is called.",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timeout"}}],[11,"timeout_at","","Creates a new future which will resolve no later than `at` specified.",0,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"timeout"}}],[8,"StreamExt","","An extension trait for streams which provides convenient accessors for timing out execution and such.",null,null],[11,"timeout","","Creates a new stream which will take at most `dur` time to yield each item of the stream.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timeoutstream"}}],[11,"poll","","",2,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"poll_next","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option"],"name":"poll"}}],[11,"new","futures_timer","Creates a new future which will fire at `dur` time into the future.",4,{"inputs":[{"name":"duration"}],"output":{"name":"delay"}}],[11,"new_at","","Creates a new future which will fire at the time specified by `at`.",4,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"new_handle","","Creates a new future which will fire at the time specified by `at`.",4,{"inputs":[{"name":"instant"},{"name":"timerhandle"}],"output":{"name":"delay"}}],[11,"reset","","Resets this timeout to an new timeout which will fire at the time specified by `dur`.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"reset_at","","Resets this timeout to an new timeout which will fire at the time specified by `at`.",4,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",4,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",5,{"inputs":[{"name":"duration"}],"output":{"name":"interval"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",5,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"new_handle","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",5,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"timerhandle"}],"output":{"name":"interval"}}],[11,"poll_next","","",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"timerhandle"}}],[11,"new","","Creates a new timer heap ready to create new timers.",7,{"inputs":[],"output":{"name":"timer"}}],[11,"handle","","Returns a handle to this timer heap, used to create new timeouts.",7,{"inputs":[{"name":"self"}],"output":{"name":"timerhandle"}}],[11,"next_event","","Returns the time at which this timer next needs to be invoked with `advance_to`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["instant"],"name":"option"}}],[11,"advance","","Proces any timers which are supposed to fire at or before the current instant.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_to","","Proces any timers which are supposed to fire before `now` specified.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",7,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"poll"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"setdefaulterror"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_as_global_fallback","","Configures this timer handle to be the one returned by `TimerHandle::default`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["setdefaulterror"],"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"timerhandle"}}]],"paths":[[8,"FutureExt"],[8,"StreamExt"],[3,"Timeout"],[3,"TimeoutStream"],[3,"Delay"],[3,"Interval"],[3,"TimerHandle"],[3,"Timer"],[3,"SetDefaultError"]]};
initSearch(searchIndex);
